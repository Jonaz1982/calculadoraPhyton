name: $(Build.DefinitionName)_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - none

pr:
  branches:
    include:
      - none

variables:
  python.version: "3.8"
  SONAR_HOST_URL: "https://sonarqube.imaginamos.com"
  SONAR_PROJECT_KEY: "test-prueba-devops"
  DOCKER_IMAGE_NAME: "test-prueba-devops"

pool:
  vmImage: "ubuntu-latest"
  timeoutInMinutes: 30

stages:
  - stage: BuildAndTest
    displayName: "Build, Test, Analyze & Dockerize"
    jobs:
      - job: RunTestsAndBuildImage
        displayName: "CI: Python, SonarQube & Docker"
        steps:
          # 1. Configurar Python
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(python.version)
              addToPath: true
            displayName: "Set up Python $(python.version)"

          # 2. Instalar dependencias
          - script: |
              python -m pip install --upgrade pip
              pip install pytest pytest-cov
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            displayName: "Install dependencies"

          # 3. Instalar SonarScanner
          - script: |
              echo "##[group]Installing SonarScanner"
              wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
              unzip -q sonar-scanner-cli-*.zip -d /opt
              rm sonar-scanner-cli-*.zip
              echo "##vso[task.prependpath]/opt/sonar-scanner-5.0.1.3006-linux/bin"
              echo "##[endgroup]"
            displayName: "Install SonarScanner"

          # 4. Ejecutar pruebas con cobertura
          - script: |
              echo "##[group]Running tests with coverage"
              python -m pytest test/ --cov=app --cov-report=xml:coverage.xml -v --junitxml=test-results.xml
              echo "##[endgroup]"
            displayName: "Run tests with coverage"

          # 5. Análisis con SonarQube
          - script: |
              echo "##[group]Running SonarQube Analysis"
              sonar-scanner \
                -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
                -Dsonar.projectName="test-prueba-devops" \
                -Dsonar.projectVersion=1.0 \
                -Dsonar.sources=app \
                -Dsonar.tests=test \
                -Dsonar.python.coverage.reportPaths=coverage.xml \
                -Dsonar.python.xunit.reportPath=test-results.xml \
                -Dsonar.host.url=$(SONAR_HOST_URL) \
                -Dsonar.login=$SONAR_TOKEN \
                -Dsonar.python.version=$(python.version) \
                -Dsonar.verbose=true
              echo "##[endgroup]"
            displayName: "Run SonarQube Analysis"
            env:
              SONAR_TOKEN: $(SONAR_TOKEN_SECRET)

          # 6. Instalar Docker
          - script: |
              echo "##[group]Installing Docker"
              sudo apt-get update
              sudo apt-get install -y \
                ca-certificates \
                curl \
                gnupg \
                lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              echo "##[endgroup]"
            displayName: "Install Docker"

          # 7. Mostrar estructura de archivos
          - script: |
              echo "📂 Workspace actual:"
              pwd
              ls -la
            displayName: "📂 Mostrar estructura de archivos"

          # 8. Construir imagen Docker desde Dockerfile en la raíz
          - script: |
              echo "##[group]Building Docker image"
              docker build -t $(DOCKER_IMAGE_NAME):$(Build.BuildId) .
              echo "##[endgroup]"
            displayName: "🐳 Build Docker Image"

          # 9. Publicar artefactos
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)
              artifact: "drop"
              publishLocation: "pipeline"
            displayName: "Publish build artifacts"
