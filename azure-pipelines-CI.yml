name: $(Build.DefinitionName)_CI_$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - main

variables:
  python.version: "3.8"
  SONAR_HOST_URL: "https://sonarqube.imaginamos.com"
  SONAR_PROJECT_KEY: "test-prueba-devops"
  DOCKER_IMAGE_NAME: "test-prueba-devops"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: BuildAndTest
    displayName: "Build, Test, Analyze & Dockerize"
    jobs:
      - job: CI
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(python.version)

          - script: |
              pip install -r requirements.txt
              pip install pytest pytest-cov
            displayName: "Instalar dependencias"

          - script: |
              wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
              unzip -q sonar-scanner-cli-*.zip -d /opt
              echo "##vso[task.prependpath]/opt/sonar-scanner-5.0.1.3006-linux/bin"
            displayName: "Instalar SonarScanner"

          - script: |
              pytest test/ --cov=app --cov-report=xml:coverage.xml -v --junitxml=test-results.xml
            displayName: "Ejecutar pruebas"

          - script: |
              sonar-scanner \
                -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
                -Dsonar.sources=app \
                -Dsonar.tests=test \
                -Dsonar.python.coverage.reportPaths=coverage.xml \
                -Dsonar.python.xunit.reportPath=test-results.xml \
                -Dsonar.host.url=$(SONAR_HOST_URL) \
                -Dsonar.login=$(SONAR_TOKEN)
            displayName: "An√°lisis SonarQube"
            env:
              SONAR_TOKEN: $(SONAR_TOKEN_SECRET)

          - script: |
              docker build -t acrtestdevopsdemo.azurecr.io/$(DOCKER_IMAGE_NAME):$(Build.BuildId) .
              echo $(DOCKER_PASSWORD) | docker login acrtestdevopsdemo.azurecr.io -u $(DOCKER_USERNAME) --password-stdin
              docker push acrtestdevopsdemo.azurecr.io/$(DOCKER_IMAGE_NAME):$(Build.BuildId)
            displayName: "Build y Push Docker"
            env:
              DOCKER_USERNAME: $(DOCKER_USERNAME)
              DOCKER_PASSWORD: $(DOCKER_PASSWORD)

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(Pipeline.Workspace)
              artifact: drop
