name: $(Build.DefinitionName)_$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - none

parameters:
  - name: entorno
    displayName: "Seleccionar entorno"
    type: string
    default: "dev"
    values:
      - dev
      - qa
      - prod

  - name: namespace
    displayName: "Namespace Kubernetes"
    type: string
    default: "default"

  - name: imagen_tag
    displayName: "Tag de imagen Docker"
    type: string
    default: "$(Build.BuildId)"

variables:
  DOCKER_IMAGE_NAME: "test-prueba-devops"
  CLUSTER_1: "aks-cluster-1"
  CLUSTER_2: "aks-cluster-2"
  RESOURCE_GROUP: "rgtest"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Despliegue_AKS
    displayName: "CD: Despliegue en Cl√∫steres AKS"
    jobs:
      - job: DesplegarEnClusters
        displayName: "Desplegar en AKS 1 y AKS 2"
        steps:
          - checkout: self
            displayName: "üì• Obtener c√≥digo del repositorio"

          - task: AzureCLI@2
            displayName: "üîê Conectarse y desplegar en AKS Cl√∫ster 1"
            inputs:
              azureSubscription: "ConexionAzureServicePrincipal1"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az account set --subscription f52b9ead-711d-42c6-b218-66ee8eb3cdcc
                az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_1) --overwrite-existing
                kubectl config use-context $(CLUSTER_1)
                kubectl apply -f k8s/ -n ${{ parameters.namespace }}

          - task: AzureCLI@2
            displayName: "üîê Conectarse y desplegar en AKS Cl√∫ster 2"
            inputs:
              azureSubscription: "ConexionAzureServicePrincipal1"
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az account set --subscription f52b9ead-711d-42c6-b218-66ee8eb3cdcc
                az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_2) --overwrite-existing
                kubectl config use-context $(CLUSTER_2)
                kubectl apply -f k8s/ -n ${{ parameters.namespace }}

          - script: |
              echo "üì¶ Imagen desplegada: $(DOCKER_IMAGE_NAME):${{ parameters.imagen_tag }}"
              echo "üöÄ Entorno: ${{ parameters.entorno }} | Namespace: ${{ parameters.namespace }}"
            displayName: "üìä Reportar despliegue"
