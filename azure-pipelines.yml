trigger:
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-latest"
  timeoutInMinutes: 10

variables:
  python.version: "3.8"
  sonar.host.url: "https://sonarqube.imaginamos.com"
  sonar.login: "sqa_ecda87f6f9e4b59bbde5d0730b3be1722513c848"
  sonar.projectKey: "test-prueba-devops"
  sonar.projectName: "test-prueba-devops"
  sonar.projectVersion: "1.0"
  sonar.sources: "app"
  sonar.tests: "test"
  sonar.language: "py"
  sonar.python.version: $(python.version)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(python.version)
      addToPath: true
    displayName: "Configurar Python $(python.version)"

  - script: |
      python -m pip install --upgrade pip
      pip install pytest
      pip install sonarqube-api
    displayName: "Instalar dependencias"
    timeoutInMinutes: 3

  - script: |
      echo "##[group]Estructura del proyecto"
      ls -R
      echo "##[endgroup]"

      echo "##[group]Configurando rutas"
      echo "PYTHONPATH actual: $PYTHONPATH"
      echo "##vso[task.prependpath]$PWD/app"
      echo "Nuevo PYTHONPATH: $PYTHONPATH"
      echo "##[endgroup]"
    displayName: "Configurar entorno"

  - script: |
      echo "##[group]Diagn칩stico detallado"
      echo "Contenido de test/:"
      ls -la test/
      echo "Contenido de app/:"
      ls -la app/
      echo "Paths de Python:"
      python -c "import sys; print('\n'.join(sys.path))"
      echo "##[endgroup]"
    displayName: "Verificaci칩n del entorno"
    condition: always()

  - task: SonarQubePrepare@4
    inputs:
      SonarQube: "SonarQube"
      scannerMode: "CLI"
      configMode: "manual"
      cliProjectKey: $(sonar.projectKey)
      cliProjectName: $(sonar.projectName)
      cliProjectVersion: $(sonar.projectVersion)
      cliSources: $(sonar.sources)
      extraProperties: |
        sonar.python.version=$(python.version)
        sonar.tests=$(sonar.tests)
        sonar.language=$(sonar.language)
        sonar.python.xunit.reportPath=test-reports/TEST-*.xml
    displayName: "Preparar an치lisis SonarQube"

  - script: |
      echo "##[group]Ejecutando pruebas"
      mkdir -p test-reports
      python -m pytest test/test_calculadora.py -v --junitxml=test-reports/TEST-results.xml
      echo "##[endgroup]"
    displayName: "Ejecutar pruebas unitarias"
    timeoutInMinutes: 5

  - task: SonarQubeAnalyze@4
    displayName: "Ejecutar an치lisis SonarQube"

  - task: SonarQubePublish@4
    inputs:
      pollingTimeoutSec: "300"
    displayName: "Publicar resultados en SonarQube"
