trigger:
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-latest"
  timeoutInMinutes: 20

variables:
  python.version: "3.8"
  SONAR_HOST_URL: "https://sonarqube.imaginamos.com"
  SONAR_TOKEN: $(SONAR_TOKEN_SECRET)
  SONAR_PROJECT_KEY: "test-prueba-devops"

stages:
  - stage: PrepararEntorno
    displayName: "Preparar Entorno"
    jobs:
      - job: Setup
        displayName: "Instalar herramientas y dependencias"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(python.version)
              addToPath: true
            displayName: "Configurar Python $(python.version)"

          - script: |
              echo "##[group]Preparando entorno"
              java -version
              python -m pip install --upgrade pip
              pip install pytest pytest-cov
              wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
              unzip sonar-scanner-cli-*.zip -d /opt
              rm sonar-scanner-cli-*.zip
              echo "##vso[task.prependpath]$PWD/app"
              echo "##vso[task.prependpath]/opt/sonar-scanner-5.0.1.3006-linux/bin"
              echo "##[endgroup]"
            displayName: "Instalar y configurar entorno"

  - stage: Pruebas
    displayName: "Ejecutar Pruebas"
    dependsOn: PrepararEntorno
    jobs:
      - job: Test
        displayName: "Pruebas y Reportes"
        steps:
          - script: |
              echo "##[group]Ejecución de pruebas"
              python -m pytest test/ --cov=app --cov-report=xml:coverage.xml -v --junitxml=test-results.xml
              echo "##[endgroup]"
            displayName: "Ejecutar pruebas"

          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "**/test-results.xml"
              testRunTitle: "Resultados de Pruebas Unitarias"
            displayName: "Publicar resultados de pruebas"

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: cobertura
              summaryFileLocation: "coverage.xml"
            displayName: "Publicar cobertura de código"

  - stage: Analisis
    displayName: "Análisis SonarQube"
    dependsOn: Pruebas
    jobs:
      - job: SonarQube
        displayName: "Análisis Estático"
        steps:
          - script: |
              echo "##[group]Análisis SonarQube"
              sonar-scanner \
                -Dsonar.projectKey=$(SONAR_PROJECT_KEY) \
                -Dsonar.projectName="test-prueba-devops" \
                -Dsonar.projectVersion=1.0 \
                -Dsonar.sources=app \
                -Dsonar.tests=test \
                -Dsonar.python.coverage.reportPaths=coverage.xml \
                -Dsonar.python.xunit.reportPath=test-results.xml \
                -Dsonar.host.url=$(SONAR_HOST_URL) \
                -Dsonar.login=$(SONAR_TOKEN) \
                -Dsonar.python.version=$(python.version)
              echo "##[endgroup]"
            displayName: "Ejecutar análisis SonarQube"

  - stage: PublicarArtefactos
    displayName: "Publicar Artefactos del Pipeline"
    dependsOn: Analisis
    jobs:
      - job: Publicar
        displayName: "Publicar resultados"
        steps:
          - task: CopyFiles@2
            inputs:
              contents: |
                coverage.xml
                test-results.xml
              targetFolder: $(Build.ArtifactStagingDirectory)

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)
              artifactName: reportes
              publishLocation: Container
            displayName: "Publicar artefacto del pipeline"
